import paho.mqtt.client as mqtt
BROKER_IP = "10.203.159.208"
TOPIC_STATE = "uagv/v1/OSRF/robot2/state"
TOPIC_CONNECTION = "uagv/v1/OSRF/robot2/connection"
TOPIC_FACTSHEET = "uagv/v1/OSRF/robot2/factsheet"
TOPIC_ORDER = "uagv/v1/OSRF/robot2/order"
TOPIC_VISUALIZATION = "uagv/v1/OSRF/robot2/visualization"
TOPIC_INSTANTACTIONS = "uagv/v1/OSRF/robot2/instantActions"


# Die Callback-Funktion wird aufgerufen, wenn eine Verbindung zum Broker hergestellt wurde
def on_connect(client, userdata, flags, rc, properties):
    print("Verbindung hergestellt mit Ergebniscode "+str(rc))
    client.subscribe(TOPIC_STATE)  # Abonnieren Sie Ihr Thema hier
    client.subscribe(TOPIC_CONNECTION)  # Abonnieren Sie Ihr Thema hier
    client.subscribe(TOPIC_FACTSHEET)  # Abonnieren Sie Ihr Thema hier
    client.subscribe(TOPIC_ORDER)  # Abonnieren Sie Ihr Thema hier
    client.subscribe(TOPIC_VISUALIZATION)  # Abonnieren Sie Ihr Thema hier
    client.subscribe(TOPIC_INSTANTACTIONS)  # Abonnieren Sie Ihr Thema hier
    

# Die Callback-Funktion wird aufgerufen, wenn eine Nachricht f√ºr ein abonniertes Thema empfangen wurde
def on_message(client, userdata, msg):
    print("-----------------START Message-----------------")
    print(f"Thema: {msg.topic}\nNachricht: {msg.payload.decode()}")
    print("-----------------END Message-----------------")

client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
client.on_connect = on_connect
client.on_message = on_message

client.connect(BROKER_IP, 1883, 60)  # Verbinden Sie sich mit Ihrem MQTT-Broker

# Blockierende Schleife, um Netzwerkevents und eingehende Daten zu verarbeiten
client.loop_forever()
